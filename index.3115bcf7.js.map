{"mappings":"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","sources":["src/js/calendar.js"],"sourcesContent":["\n\nconst daysTag = document.querySelector('.days'),\n  currentDate = document.querySelector('.current-date'),\n  prevNextIcon = document.querySelectorAll('.calendar-icons span');\n\n// getting new date, current year and month\nlet date = new Date(),\n  currDay = date.getDate(),\n  currMonth = date.getMonth(),\n  currYear = date.getFullYear();\n\n\n//Активные кнопки и модульний календарь\n(() => {\n  const refs = {\n    openModalBtn: document.querySelector('[data-modal-open]'),\n    closeModalBtn: document.querySelector('body'),\n    modal: document.querySelector('[data-modal]'),\n    input: document.querySelector('.calendar-input'),\n    arrow: document.querySelector('.calendar__button-arrow'),\n    calendarBtn: document.querySelector('.calendar__button-calendar'),\n  };\n\n  if (refs.openModalBtn) {\n    refs.openModalBtn.addEventListener('click', toggleModal);\n  }\n\n  document.addEventListener('click', hideModals);\n \n  function toggleModal() {\n    refs.modal.classList.toggle('is-hidden-wrapper');\n    refs.input.classList.toggle('isActive');\n    refs.arrow.classList.toggle('switched');\n    refs.calendarBtn.classList.toggle('switchedColor');\n    // showCurrentDate();\n  }\n\n  function hideModals(evt) {\n    let dataValue = document.getElementById('input-picker').value;\n    if (evt.target.closest('.calendar-form')) {\n      return;\n    }\n    if (refs.input.classList.contains('isActive')) {\n      refs.modal.classList.add('is-hidden-wrapper');\n      refs.input.classList.remove('isActive');\n      refs.arrow.classList.remove('switched');\n      refs.calendarBtn.classList.remove('switchedColor');\n      document.getElementById('input-picker').value = '';\n      localStorage.removeItem('VALUE');\n      localStorage.removeItem('date');\n    }\n  }\n})();\n\n// storing full name of all months in array\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\nexport const renderCalendar = number => {\n\n  let firstDayofMonth = new Date(currYear, currMonth, 1).getDay(), // getting first day of month\n    lastDateofMonth = new Date(currYear, currMonth + 1, 0).getDate(), // getting last date of month\n    lastDayofMonth = new Date(currYear, currMonth, lastDateofMonth).getDay(), // getting last day of month\n    lastDateofLastMonth = new Date(currYear, currMonth, 0).getDate(); // getting last date of previous month\n  let liTag = '';\n  for (let i = firstDayofMonth; i > 0; i--) {\n    // creating li of previous month last days\n    liTag += `<li style=\"color: silver\" class=\"inactive\">${\n      lastDateofLastMonth - i + 1\n    }</li>`;\n  }\n\n  for (let i = 1; i <= lastDateofMonth; i++) {\n    // creating li of all days of current month\n    // adding active class to li if the current day, month, and year matched\n    let isToday =\n      i === date.getDate() &&\n      currMonth === new Date().getMonth() &&\n      currYear === new Date().getFullYear();\n    //   ? 'active'\n    //   : '';\n    liTag += `<li class=\"${isToday}\">${i}</li>`;\n    //console.log(isToday);\n  }\n  for (let i = lastDayofMonth; i < 6; i++) {\n    // creating li of next month first days\n    liTag += `<li style=\"color: silver\" class=\"inactive\">${\n      i - lastDayofMonth + 1\n    }</li>`;\n  }\n\n  if (currentDate) {\n    currentDate.innerText = `${months[currMonth]} ${currYear}`;\n  }\n  if (daysTag) {\n    daysTag.innerHTML = liTag;\n  }\n  // passing current mon and yr as currentDate text\n\n  // console.log(liTag);\n  const dayChange = document.querySelector('.days');\n  // function addChangingDayListener() {\n\n  if (dayChange) {\n    dayChange.addEventListener('click', evt => {\n    \n      [...evt.currentTarget.children].forEach(item => {\n        item.classList.remove('active');\n        //console.log(item.textContent);\n      });\n\n      evt.target.classList.add('active');\n      let newValueDay = evt.target.textContent;\n      if (evt.target.textContent.length > 10) {\n        return;\n      }\n      let month = (currMonth + 1).toString();\n      document.getElementById('input-picker').value =\n        currYear +\n        '/' +\n        month.padStart(2, '0') +\n        '/' +\n        newValueDay.padStart(2, '0');\n\n      localStorage.setItem('VALUE', JSON.stringify(newValueDay));\n\n      let inputDateValue = document.querySelector('.calendar-input').value;\n      // console.log(inputDateValue);\n      localStorage.setItem('date', JSON.stringify(inputDateValue));\n      document.querySelector('[data-modal]').classList.add('is-hidden-wrapper');\n      document.querySelector('.calendar-input').classList.remove('isActive');\n      document\n        .querySelector('.calendar__button-arrow')\n        .classList.remove('switched');\n      document\n        .querySelector('.calendar__button-calendar')\n        .classList.remove('switchedColor');\n    });\n  }\n};\n\nrenderCalendar();\n\nlet findUl = document.querySelector('.days');\n// inputDateValue = document.querySelector('.calendar-input').value;\n\nprevNextIcon.forEach(icon => {\n  icon.addEventListener('click', () => {\n    currMonth = icon.id === 'prev' ? currMonth - 1 : currMonth + 1;\n    if (currMonth < 0 || currMonth > 11) {\n      date = new Date(currYear, currMonth, new Date().getDate());\n      currYear = date.getFullYear(); \n      currMonth = date.getMonth(); \n    } else {\n      date = new Date(); \n    }\n    renderCalendar(); \n    let test = JSON.parse(localStorage.getItem('VALUE'));\n    let reachUl = daysTag.childNodes;\n    //console.log(reachUl);\n    reachUl.forEach(elem => {\n      if (elem.textContent === test) {\n        // console.log(elem.textContent);\n        elem.classList.add('active');\n      }\n    });\n  });\n});\n\nlocalStorage.removeItem('VALUE');\nlocalStorage.removeItem('date');\n\n\n\n\n// import { getCategoryList } from './api/fetchApi.js';\n// import cardMarkup from './cardMarkup'\n\n\n\n// function filterObjectsByDateAndCallCardMarkup(objects, date) {\n//   const filteredObjects = objects.filter((object) => {\n//     // Перевіряємо, чи дата об'єкту співпадає з заданою датою\n//     return object.date.getTime() === date.getTime();\n//   });\n\n//   // Для кожного об'єкту, який пройшов фільтрацію, викликаємо функцію \"cardMarcup\"\n//   filteredObjects.forEach((object) => {\n//     const cardMarkup = cardMarcup(object);\n//     // Робимо щось зі згенерованим розміткою картки, наприклад, додаємо його до DOM\n//     document.body.appendChild(cardMarkup);\n//   });\n// }\n\n// // Приклад використання функцій\n// const categories = ['Category 1', 'Category 2', 'Category 3'];\n// const objects = generateObjectsByCategory(categories);\n\n// // Фільтруємо об'єкти за датою і викликаємо \"cardMarkup\" для кожного об'єкту, який пройшов фільтрацію\n// const dateToFilterBy = new Date();\n// filterObjectsByDateAndCallCardMarkup(objects, dateToFilterBy);"],"names":["refs","$8nrFW","parcelRequire","$e68ac68539faebb3$var$daysTag","document","querySelector","$e68ac68539faebb3$var$currentDate","$e68ac68539faebb3$var$prevNextIcon","querySelectorAll","$e68ac68539faebb3$var$date","Date","$e68ac68539faebb3$var$currMonth","getDate","getMonth","$e68ac68539faebb3$var$currYear","getFullYear","openModalBtn","closeModalBtn","modal","input","arrow","calendarBtn","addEventListener","classList","toggle","evt","getElementById","value","target","closest","contains","add","remove","localStorage","removeItem","$e68ac68539faebb3$var$months","$e68ac68539faebb3$export$c1a8fd48acd59fbd","number","firstDayofMonth","getDay","lastDateofMonth","lastDayofMonth","lastDateofLastMonth","liTag","i","concat","i1","isToday","i2","innerText","innerHTML","dayChange","$parcel$interopDefault","currentTarget","children","forEach","item","newValueDay","textContent","length","month","toString","padStart","setItem","JSON","stringify","inputDateValue","icon","id","test","parse","getItem","childNodes","elem"],"version":3,"file":"index.3115bcf7.js.map"}